
import 'package:flutter/foundation.dart';
@immutable
class UserModel {
  final String email;
  final String name;
  final List<String> followers;
  final List<String> following;
  final String profilePic;
  final String coverPhoto;
  final String uid;
  final String bio;
  final bool isBlue;
  const UserModel({
    required this.email,
    required this.name,
    required this.followers,
    required this.following,
    required this.profilePic,
    required this.coverPhoto,
    required this.uid,
    required this.bio,
    required this.isBlue,
  });


  UserModel copyWith({
    String? email,
    String? name,
    List<String>? followers,
    List<String>? following,
    String? profilePic,
    String? coverPhoto,
    String? uid,
    String? bio,
    bool? isBlue,
  }) {
    return UserModel(
      email: email ?? this.email,
      name: name ?? this.name,
      followers: followers ?? this.followers,
      following: following ?? this.following,
      profilePic: profilePic ?? this.profilePic,
      coverPhoto: coverPhoto ?? this.coverPhoto,
      uid: uid ?? this.uid,
      bio: bio ?? this.bio,
      isBlue: isBlue ?? this.isBlue,
    );
  }

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'email': email,
      'name': name,
      'followers': followers,
      'following': following,
      'profilePic': profilePic,
      'coverPhoto': coverPhoto,
      //uid is generated by appwrite
      'bio': bio,
      'isBlue': isBlue,
    };
  }

  factory UserModel.fromMap(Map<String, dynamic> map) {
    return UserModel(
      email: map['email'] as String,
      name: map['name'] as String,
      followers: List<String>.from((map['followers'] as List<dynamic>)),
      following: List<String>.from((map['following'] as List<dynamic>)),
      profilePic: map['profilePic'] as String,
      coverPhoto: map['coverPhoto'] as String,
      uid: map['\$id'] as String,
      bio: map['bio'] as String,
      isBlue: map['isBlue'] as bool,
    );
  }

  @override
  String toString() {
    return 'UserModel(email: $email, name: $name, followers: $followers, following: $following, profilePic: $profilePic, coverPhoto: $coverPhoto, uid: $uid, bio: $bio, isBlue: $isBlue)';
  }

  @override
  bool operator ==(covariant UserModel other) {
    if (identical(this, other)) return true;
  
    return 
      other.email == email &&
      other.name == name &&
      listEquals(other.followers, followers) &&
      listEquals(other.following, following) &&
      other.profilePic == profilePic &&
      other.coverPhoto == coverPhoto &&
      other.uid == uid &&
      other.bio == bio &&
      other.isBlue == isBlue;
  }

  @override
  int get hashCode {
    return email.hashCode ^
      name.hashCode ^
      followers.hashCode ^
      following.hashCode ^
      profilePic.hashCode ^
      coverPhoto.hashCode ^
      uid.hashCode ^
      bio.hashCode ^
      isBlue.hashCode;
  }
}
